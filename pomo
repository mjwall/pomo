#!/bin/bash
# Pomodoro script
#
# Sleeps for $WORK_TIME and then rests for time $REST_TIME.  Press CTRL-C to
# pause.  You can enter a note while paused.  Press CTRL-\ to quit.
#
# Your Pomodoro's will be logged to a file, the name of which is displayed
# after you quit.

# TODO:
# - add ability to pass in number of pomodoro to start at
# - also add option for time, rest, and long rest
# - maybe option for directory to log files
# - make cycle of short/long breaks configurable
# - add readme
# - add -h flag to give info
# - make prereqs function to test for directory and lib-notify etc

#set -x #debug

TIME_INTERVAL=m #m for minutes, s for seconds (useful for debugging)
WORK_TIME=25
REST_TIME=5
LONG_REST_TIME=20 #every four, could make that configurable
COMPLETED_POMODOROS=0
POMO_LOG_DIR="${HOME}/.pomodoro"
POMO_LOG_FILE="$(date "+%Y%m%d%H%M%s").log"
POMO_LOG="${POMO_LOG_DIR}/${POMO_LOG_FILE}"

# to use the sound, you must move the included CrystalBell.aiff to
# /System/Library/Sounds, otherwise the default sound will play.  The
# CrystalBell is included from http://soundjax.com/ and converted to aiff with iTunes

script_dir() {
  if [ -z "${SCRIPT_DIR}" ]; then
    # even resolves symlinks, see http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in
    local SOURCE="${BASH_SOURCE[0]}"
    while [ -h "$SOURCE" ] ; do SOURCE="$(readlink "$SOURCE")"; done
    SCRIPT_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  fi
  echo "${SCRIPT_DIR}"
}

out() {
  # output to screen and log
  local msg=$1
  printf "%b" "${msg}\n" | tee -a ${POMO_LOG}
}

log() {
  # only output to log
  local msg=$1
  printf "%b" "${msg}\n" >> ${POMO_LOG}
}

alert() {
  local message=$1; shift
  local header=$1; shift
  local sound=$1; shift
  if [ "${header}x" != "${x}" ]; then
    out "${header} : ${message}"
  else
    out "${message}"
  fi
  local play_sound=""
  if [ "${sound}x" != "x" ]; then
    play_sound=" sound name \"${sound}\""
  fi
  if [ "$(os)" == "mac" ]; then
    osascript -e "display notification \"${message}\" with title \"${header}\" ${play_sound}"
  elif [ "$(os)" == "linux" ]; then
    # sound not implemented yet for Linux
    notify-send "${header}" "${message}"
  else
    out "You shouldn't have gotten here"
    exit 1
  fi
}

os() {
  if [ -z "${OS}" ]; then
    unamestr=$(uname)
    case "${unamestr}" in
      "Darwin")
        OS="mac"
        ;;
      "Linux")
        OS="linux"
        ;;
      *)
        echo "Operating system '${unamestr}' not yet support"
        exit 1
        ;;
    esac
  fi
  echo "${OS}"
}

get_input() {
  local PROMPT=$1
  trap "out \"No Description\" 1>&2; exit" SIGINT
  read -e -p "${PROMPT}" input
  echo "${input}"
}

count_down() {
  local TIME=$1
  while [ "${TIME}" -gt 0 ]; do
    local msg="${TIME}${TIME_INTERVAL} remaining"
    echo -ne "\r  ${msg}             "
    if [ "${TIME_INTERVAL}" == "m" ]; then
      sleep 60
    else
      sleep 1
    fi
    TIME=$(expr $TIME - 1)
  done
  echo -ne "\r  ${TIME}${TIME_INTERVAL} remaining             \n"
}

work() {
  out ""
  current_pomodoro=$(expr $COMPLETED_POMODOROS + 1)
  alert "Pomodoro ${current_pomodoro}" "Starting" "Basso"
  local description=$(get_input "  Description: ")
  log "  Description: ${description}"
  alert "  Duration: ${WORK_TIME}/${TIME_INTERVAL}\n  Start: $(now)" "  Begin"
  count_down $WORK_TIME
  COMPLETED_POMODOROS=$current_pomodoro
  out "  End: $(now)"
}

rest() {
  # every fourth pomodoro, take a longer break
  if [ $(expr ${COMPLETED_POMODOROS} % 4) -eq 0 ]; then
    alert "Long break" "Take ${LONG_REST_TIME}/${TIME_INTERVAL}" "CrystalBell"
    count_down $LONG_REST_TIME
  else
    alert "Short break" "Take ${REST_TIME}/${TIME_INTERVAL}" "CrystalBell"
    count_down $REST_TIME
  fi
  out "-----------------------------"
}

interupt() {
  #echo "SIGINT"
  echo -ne "\n"
  out "  ----"
  out "  Pause: $(now)"
  echo -ne "  Enter note or hit return to continue\n"
  local note=$(get_input "  Note: ")
  log "  Note: ${note}"
  out "  Resume: $(now)"
}

now() {
  echo "$(date "+%H:%M:%S %D")"
}

stop() {
  #echo "SIGQUIT"
  alert "You completed ${COMPLETED_POMODOROS} pomodoros" "\n\n----\nAll done." "Glass"
  #echo "Here is the log"
  #cat $POMO_LOG
  echo "View log at $POMO_LOG"
  exit 0
}

if [ ! -d "${POMO_LOG_DIR}" ]; then
  mkdir "${POMO_LOG_DIR}"
fi

trap interupt  SIGINT
trap stop      SIGQUIT
out "Starting Pomodoros......"
out "Press CTRL-C if you are interupted.  Press CTRL-\ when you want to quit"
while true; do
  work
  rest
done
